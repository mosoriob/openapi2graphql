# Model Catalog
# This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
# The version of the OpenAPI document: v1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# grid_api

type mutation {
  # Delete an existing Grid
  # Delete an existing Grid (more information in https://w3id.org/okn/o/sdm#Grid)
  # @param String! Id_ The ID of the Grid to be retrieved
  # @param String! user Username
  # @return [null]
  GridsIdDelete(Id_: String!, user: String!): null

  # Update an existing Grid
  # Updates an existing Grid (more information in https://w3id.org/okn/o/sdm#Grid)
  # @param String! Id_ The ID of the Grid to be retrieved
  # @param String! user Username
  # @param Grid grid An old Gridto be updated
  # @return [Grid]
  GridsIdPut(Id_: String!, user: String!, grid: Grid): Grid

  # Create one Grid
  # Create a new instance of Grid (more information in https://w3id.org/okn/o/sdm#Grid)
  # @param String! user Username
  # @param Grid grid Information about the Gridto be created
  # @return [Grid]
  GridsPost(user: String!, grid: Grid): Grid

}

type query {
  # List all instances of Grid
  # Gets a list of all instances of Grid (more information in https://w3id.org/okn/o/sdm#Grid)
  # @param String! username Name of the user graph to query
  # @param String! label Filter by label
  # @param Int! page Page number
  # @param Int! perPage Items per page
  # @return [[Grid]]
  GridsGet(username: String!, label: String!, page: Int!, perPage: Int!): [Grid]

  # Get a single Grid by its id
  # Gets the details of a given Grid (more information in https://w3id.org/okn/o/sdm#Grid)
  # @param String! Id_ The ID of the Grid to be retrieved
  # @param String! username Name of the user graph to query
  # @return [Grid]
  GridsIdGet(Id_: String!, username: String!): Grid

}

