# Model Catalog
# This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
# The version of the OpenAPI document: v1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# unit_api

type mutation {
  # Delete an existing Unit
  # Delete an existing Unit (more information in https://w3id.org/okn/o/sd#Unit)
  # @param String! Id_ The ID of the Unit to be retrieved
  # @param String! user Username
  # @return [null]
  UnitsIdDelete(Id_: String!, user: String!): null

  # Update an existing Unit
  # Updates an existing Unit (more information in https://w3id.org/okn/o/sd#Unit)
  # @param String! Id_ The ID of the Unit to be retrieved
  # @param String! user Username
  # @param Unit unit An old Unitto be updated
  # @return [Unit]
  UnitsIdPut(Id_: String!, user: String!, unit: Unit): Unit

  # Create one Unit
  # Create a new instance of Unit (more information in https://w3id.org/okn/o/sd#Unit)
  # @param String! user Username
  # @param Unit unit Information about the Unitto be created
  # @return [Unit]
  UnitsPost(user: String!, unit: Unit): Unit

}

type query {
  # List all instances of Unit
  # Gets a list of all instances of Unit (more information in https://w3id.org/okn/o/sd#Unit)
  # @param String! username Name of the user graph to query
  # @param String! label Filter by label
  # @param Int! page Page number
  # @param Int! perPage Items per page
  # @return [[Unit]]
  UnitsGet(username: String!, label: String!, page: Int!, perPage: Int!): [Unit]

  # Get a single Unit by its id
  # Gets the details of a given Unit (more information in https://w3id.org/okn/o/sd#Unit)
  # @param String! Id_ The ID of the Unit to be retrieved
  # @param String! username Name of the user graph to query
  # @return [Unit]
  UnitsIdGet(Id_: String!, username: String!): Unit

}

