# Model Catalog
# This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
# The version of the OpenAPI document: v1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# hybrid_model_api

type mutation {
  # Delete an existing HybridModel
  # Delete an existing HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)
  # @param String! Id_ The ID of the HybridModel to be retrieved
  # @param String! user Username
  # @return [null]
  HybridmodelsIdDelete(Id_: String!, user: String!): null

  # Update an existing HybridModel
  # Updates an existing HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)
  # @param String! Id_ The ID of the HybridModel to be retrieved
  # @param String! user Username
  # @param HybridModel hybridModel An old HybridModelto be updated
  # @return [HybridModel]
  HybridmodelsIdPut(Id_: String!, user: String!, hybridModel: HybridModel): HybridModel

  # Create one HybridModel
  # Create a new instance of HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)
  # @param String! user Username
  # @param HybridModel hybridModel Information about the HybridModelto be created
  # @return [HybridModel]
  HybridmodelsPost(user: String!, hybridModel: HybridModel): HybridModel

}

type query {
  # List all instances of HybridModel
  # Gets a list of all instances of HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)
  # @param String! username Name of the user graph to query
  # @param String! label Filter by label
  # @param Int! page Page number
  # @param Int! perPage Items per page
  # @return [[HybridModel]]
  HybridmodelsGet(username: String!, label: String!, page: Int!, perPage: Int!): [HybridModel]

  # Get a single HybridModel by its id
  # Gets the details of a given HybridModel (more information in https://w3id.org/okn/o/sdm#HybridModel)
  # @param String! Id_ The ID of the HybridModel to be retrieved
  # @param String! username Name of the user graph to query
  # @return [HybridModel]
  HybridmodelsIdGet(Id_: String!, username: String!): HybridModel

}

