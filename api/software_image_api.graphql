# Model Catalog
# This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
# The version of the OpenAPI document: v1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# software_image_api

type mutation {
  # Delete an existing SoftwareImage
  # Delete an existing SoftwareImage (more information in https://w3id.org/okn/o/sd#SoftwareImage)
  # @param String! Id_ The ID of the SoftwareImage to be retrieved
  # @param String! user Username
  # @return [null]
  SoftwareimagesIdDelete(Id_: String!, user: String!): null

  # Update an existing SoftwareImage
  # Updates an existing SoftwareImage (more information in https://w3id.org/okn/o/sd#SoftwareImage)
  # @param String! Id_ The ID of the SoftwareImage to be retrieved
  # @param String! user Username
  # @param SoftwareImage softwareImage An old SoftwareImageto be updated
  # @return [SoftwareImage]
  SoftwareimagesIdPut(Id_: String!, user: String!, softwareImage: SoftwareImage): SoftwareImage

  # Create one SoftwareImage
  # Create a new instance of SoftwareImage (more information in https://w3id.org/okn/o/sd#SoftwareImage)
  # @param String! user Username
  # @param SoftwareImage softwareImage Information about the SoftwareImageto be created
  # @return [SoftwareImage]
  SoftwareimagesPost(user: String!, softwareImage: SoftwareImage): SoftwareImage

}

type query {
  # List all instances of SoftwareImage
  # Gets a list of all instances of SoftwareImage (more information in https://w3id.org/okn/o/sd#SoftwareImage)
  # @param String! username Name of the user graph to query
  # @param String! label Filter by label
  # @param Int! page Page number
  # @param Int! perPage Items per page
  # @return [[SoftwareImage]]
  SoftwareimagesGet(username: String!, label: String!, page: Int!, perPage: Int!): [SoftwareImage]

  # Get a single SoftwareImage by its id
  # Gets the details of a given SoftwareImage (more information in https://w3id.org/okn/o/sd#SoftwareImage)
  # @param String! Id_ The ID of the SoftwareImage to be retrieved
  # @param String! username Name of the user graph to query
  # @return [SoftwareImage]
  SoftwareimagesIdGet(Id_: String!, username: String!): SoftwareImage

}

