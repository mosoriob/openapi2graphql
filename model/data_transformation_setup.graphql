# Model Catalog
# This is the API of the Software Description Ontology at [https://w3id.org/okn/o/sdm](https://w3id.org/okn/o/sdm)
# The version of the OpenAPI document: v1.5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# Special type of data transformation where the inputs and parameters have some pre-selected values. For example, they may point to a particular dataset URL to be used in the transformation
type DataTransformationSetup {

  # Instructions needed to download a software component. The difference with &#x60;hasDownloadURL&#x60; is that this property captures the human readable instructions required to download software. For example, sometimes an authentication is needed, users need to fill in a form, etc.
  hasDownloadInstructions: [String!]

  # Keywords associated with a software component
  keywords: [String!]

  # Pointer to the documentation of the model
  hasDocumentation: [String!]

  # Property that points to the main runnable script for the current function
  hasImplementationScriptLocation: [String!]

  # Description not available
  softwareRequirements: [String!]

  # Download URL where to obtain the source/executable of the software
  hasDownloadURL: [String!]

  # type of the resource
  type: [String!]

  # Instructions required to install this particular piece of software. Installation instructions usually are available in a human-readable manner.
  hasInstallationInstructions: [String!]

  # Property that links a software component to other useful software that canbe used to visualize its outputs
  compatibleVisualizationSoftware: [Software]

  # Description not available
  copyrightHolder: [TodoObjectMapping]

  # Frequently asked questions about a software
  hasFAQ: [String!]

  # Description not available
  logo: [Image]

  # Description not available
  hasContactPerson: [TodoObjectMapping]

  # Tag used to annotate a version or a software configuration. This annotation is useful to show which version is the latest, or which version is deprecated. Supported tags are: \&quot;latest\&quot;, \&quot;deprecated\&quot;
  tag: [String!]

  # identifier
  id: String!

  # Identifier of the resource being described
  identifier: [String!]

  # Description not available
  hasSampleExecution: [SampleExecution]

  # Description not available
  hasSampleResult: [SampleResource]

  # Description not available
  author: [TodoObjectMapping]

  # Constraint or rule associated to a  variable or software configuration. For example: \&quot;This model accepts only monthly data\&quot;, or \&quot;all inputs of this model configuration must share the same location\&quot;. More structured restrictions, such as Jena rules or SWRL rules may also be captured with this property
  hasConstraint: [String!]

  # A file (e.g., Dockerfile) with executable instructions indicating how a Software Image or a Software component is built
  hasBuildFile: [String!]

  # A summarized description of the resource
  shortDescription: [String!]

  # Execution instructions on how to run the image
  hasExecutionCommand: [String!]

  # Description not available
  datePublished: [String!]

  # License of a software component or its source code
  license: [String!]

  # Description not available
  hasSourceCode: [SourceCode]

  # Property used to define configurations with some fixed resources and values. The rationale of this property is to allow predefined configurations
  hasSetup: [ConfigurationSetup]

  # An example explaining a scenario where the software component was used in plain language.
  hasExample: [String!]

  # Description not available
  publisher: [TodoObjectMapping]

  # Property that expresses what are the outputs of a model
  hasOutput: [DatasetSpecification]

  # Digital Object Identifier associated with a software component
  doi: [String!]

  # Property that links a software project to its funding information
  hasFunding: [FundingInformation]

  # Location of the aggregation of all the files needed to execute the component. Usually a zip file including the run script and support scripts, including specification files
  hasComponentLocation: [String!]

  # Property to link details, such as mailing lists in case a contact person is not provided
  supportDetails: [String!]

  # Description not available
  hasVersion: [SoftwareVersion]

  # Description not available
  hasTypicalDataSource: [String!]

  # small description
  description: [String!]

  # Main publication to cite for this software component
  referencePublication: [String!]

  # Description not available
  screenshot: [Image]

  # Property to identify the original source of the information of the annotated resource. It could be a web page, an organization, a person, some experiment notes, etc.
  hadPrimarySource: [TodoObjectMapping]

  # Pointer to the issue tracker of a software component
  issueTracker: [String!]

  # Function to link a function with its corresponding container
  hasSoftwareImage: [SoftwareImage]

  # Description not available
  dateCreated: [String!]

  # Description not available
  contributor: [Person]

  # Objective or main functionality that can be achieved by running this software
  hasPurpose: [String!]

  # Instructions that indicate how a software component should be executed. The difference with &#x60;hasExecutionCommand&#x60; is that the execution instructions aim to be human-readable, and have explanations between the different commands and instructions
  hasExecutableInstructions: [String!]

  # A typical sample visualization of the softwware outputs
  hasSampleVisualization: [Visualization]

  # Description not available
  memoryRequirements: [String!]

  # Website of the software
  website: [String!]

  # How to cite this software
  citation: [String!]

  # Description not available
  processorRequirements: [String!]

  # Parameter that can be adjusted in a configuration setup
  adjustableParameter: [Parameter]

  # Property that describes the usage considerations of a particular software. These notes capture the rationale of for that software configuration, along with an explanation for sample inputs, things to consider when running the model with data, etc.
  hasUsageNotes: [String!]

  # Property that links to the location of scripts that may be used from the main runnable script.
  hasSupportScriptLocation: [String!]

  # URl to the readme file of a software component
  readme: [String!]

  # short description of the resource
  label: [String!]

  # Assumptions of a software, e.g. the solver being used for a particular model, the source of the data (e.g., all data must have a given resolution), etc.
  hasAssumption: [String!]

  # Property that indicates the parameters of a model configuration
  hasParameter: [Parameter]

  # Description not available
  operatingSystems: [String!]

  # Property that links a software component with an executable notebook (e.g., Jupyter notebook) that illustrates how to use it in an executable manner.
  hasExecutableNotebook: [String!]

  # Property that indicates that a software component (or any of its outputs) can be used to calculate a particular index. The rationale for this property is that indices are usually calculated by applying post-processing steps to the outputs of a software component.
  usefulForCalculatingIndex: [NumericalIndex]

  # Property that links a model configuration to the input types expected by it.
  hasInput: [DatasetSpecification]

}
